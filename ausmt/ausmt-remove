#!/bin/sh

#
# These are expected to be set at packaging time
#

APP_DIR=/usr/share/patchmanager/patches/${1}

PATCH_NAME=unified_diff.patch

# BSPATCH_DIR=binary_patches

#
# Here starts the part where all the magic happens
#

VERSION=ausmt-sailfishos-1

PATCH_LOG_FILE=/var/lib/patchmanager/ausmt/ausmt.log
PATCH_CONTROL_DIR=/var/lib/patchmanager/ausmt/control
PATCH_PACKAGES_LIST=/var/lib/patchmanager/ausmt/packages
PATCH_CACHE_FILE=/var/lib/patchmanager/ausmt/packages.cache

#
# Required applications and their full execute paths
#

RPM_EXEC=/bin/rpm
PATCH_EXEC=/usr/bin/patch
LSDIFF_EXEC=/usr/bin/lsdiff
# BSPATCH_EXEC=/usr/bin/bspatch

if [ -f /media/cryptofs/apps/usr/bin/patch ]; then
  PATCH_EXEC=/media/cryptofs/apps/usr/bin/patch
fi

if [ -f /media/cryptofs/apps/usr/bin/lsdiff ]; then
  LSDIFF_EXEC=/media/cryptofs/apps/usr/bin/lsdiff
fi

#
# Helper functions that do all the needed heavy work
#

do_remove_failure() {
  ${PATCH_EXEC} -s -p1 -R -d / --dry-run < ${APP_DIR}/${PATCH_NAME} | tee -a $PATCH_LOG 1>&2

  echo | tee -a ${PATCH_LOG_FILE}
  echo "*** FAILED ***" | tee -a ${PATCH_LOG_FILE}
  echo | tee -a ${PATCH_LOG_FILE}

  /opt/ausmt/ausmt-notify frm ${APP_DIR}

  rm -f $PATCH_CACHE_FILE >/dev/null 2>&1

#   mount -o ro,remount / | tee -a ${PATCH_LOG_FILE} 1>&2

  exit 1
}

do_remove_success() {
  echo | tee -a ${PATCH_LOG_FILE}
  echo "*** SUCCESS ***" | tee -a ${PATCH_LOG_FILE}
  echo | tee -a ${PATCH_LOG_FILE}

  /opt/ausmt/ausmt-notify rm ${APP_DIR}

  rm -f $PATCH_CACHE_FILE >/dev/null 2>&1

#   mount -o ro,remount / | tee -a ${PATCH_LOG_FILE} 1>&2

  exit 0
}

get_bck_file() {
  bck_file=`dirname ${file}`"/."`basename ${file}`".orig"

  if [ ! -f ${bck_file} ]; then
    bck_file="${file}.webosinternals.orig"
  fi
}

get_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  appid=`basename ${APP_DIR}`

  if [ -f $PATCH_CACHE_FILE ]; then
    md5sums_line=`grep "^${file} " $PATCH_CACHE_FILE`

    palm_md5sum=`echo ${md5sums_line} | awk '{print $2}'`

    pkg_package=`echo ${md5sums_line} | awk '{print $3}'`

    pkg_version=`echo ${md5sums_line} | awk '{print $4}'`
  fi
}

find_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  md5sums_line=""

  echo "Finding md5sum for original file" >> ${PATCH_LOG_FILE}
  echo "  file: ${file}" >> ${PATCH_LOG_FILE}
  
  # We change from Palm, and use rpm to query the MD5 (or SHA256) sum
  pkg_package=$(${RPM_EXEC} -q --queryformat '%{NAME}' -f ${file} 2> /dev/null)
  pkg_version=$(${RPM_EXEC} -q --queryformat '%{VERSION}-%{RELEASE}' -f ${file} 2> /dev/null)
  palm_md5sum=$(${RPM_EXEC} -q --queryformat '[%{FILENAMES} %{FILEMD5S}\n]' -f ${file} | grep ${file} | awk '{print $2}' 2> /dev/null)
  
  if [ ! -z "${palm_md5sum}" ]; then
    echo "${file} ${palm_md5sum} ${pkg_package} ${pkg_version}" >>$PATCH_CACHE_FILE
  fi
}

check_packages_file() {
  if [ -f ${APP_DIR}/${PACKAGES_FILE} ]; then
    for p in `cat ${APP_DIR}/${PACKAGES_FILE}` ; do
      md5sums_line=`grep "*.${file}$" ${IPKG_INFO_DIR}/${p}.md5sums`

      if [ ! -z "${md5sums_line}" ]; then
        pkg_package="${p}"

        break
      fi
    done
  fi
}

verify_text_patch() {
  if [ -f ${APP_DIR}/${PATCH_NAME} ]; then
    echo >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo "Checking patch files" >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo >> ${PATCH_LOG_FILE}
  
    FILE_LIST=" "`${LSDIFF_EXEC} --addprefix=/ --strip=1 ${APP_DIR}/${PATCH_NAME}`

    for file in ${FILE_LIST} ; do
      find_palm_md5sum
    done

    echo >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo "Dry running patch" >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo >> ${PATCH_LOG_FILE}

    ${PATCH_EXEC} -f -R -p 1 -d / --dry-run < ${APP_DIR}/${PATCH_NAME} 2>&1 >> ${PATCH_LOG_FILE}

    if [ ${?} -ne 0 ]; then
      echo >> ${PATCH_LOG_FILE}
      echo "----------------------------------" >> ${PATCH_LOG_FILE}
      echo "Dry run failed, trying without -R" >> ${PATCH_LOG_FILE}
      echo "----------------------------------" >> ${PATCH_LOG_FILE}
      echo >> ${PATCH_LOG_FILE}

      ${PATCH_EXEC} -f -p 1 -d / --dry-run < ${APP_DIR}/${PATCH_NAME} 2>&1 >> ${PATCH_LOG_FILE}

      if [ ${?} -eq 0 ]; then
        echo | tee -a ${PATCH_LOG_FILE}
        echo "Interestingly, the patch seems to be already unapplied" | tee -a ${PATCH_LOG_FILE}
        echo | tee -a ${PATCH_LOG_FILE}

        patch_already_unapplied="yes"
      else
        FAIL_LIST=" "`${PATCH_EXEC} -s -f -R -p 1 -d / --dry-run < ${APP_DIR}/${PATCH_NAME} 2>&1 | awk '{print "/"$12}' | sed s:".rej$":"":`

        if [ "${FAIL_LIST}" = "${FILE_LIST}" ]; then
          patch_already_unapplied="yes"
        fi
      fi
    fi
  fi
}

# verify_binary_patches() {
#   if [ -d ${APP_DIR}/${BSPATCH_DIR} ]; then
#     echo >> ${PATCH_LOG_FILE}
#     echo "----------------------------------" >> ${PATCH_LOG_FILE}
#     echo "Checking binary patches" >> ${PATCH_LOG_FILE}
#     echo "----------------------------------" >> ${PATCH_LOG_FILE}
#     echo >> ${PATCH_LOG_FILE}
# 
#     for i in `find ${APP_DIR}/${BSPATCH_DIR} -type f` ; do
#       file=`dirname ${i#${APP_DIR}/${BSPATCH_DIR}}`"/"`basename ${i} .bspatch`
# 
#       FILE_LIST="${FILE_LIST} ${file}"
# 
#       if [ -f ${file} ]; then
#         find_palm_md5sum
# 
#         file_md5sum=`md5sum ${file} | awk '{print $1}'`
# 
#         if [ -z "${palm_md5sum}" ]; then
#           FAIL_LIST="${FAIL_LIST} ${file}"
#         elif [ "${file_md5sum}" = "${palm_md5sum}" ]; then
#           echo | tee -a ${PATCH_LOG_FILE}
#           echo "Interestingly, the binary file is already unpatched" | tee -a ${PATCH_LOG_FILE}
#           echo | tee -a ${PATCH_LOG_FILE}
# 
#           FAIL_LIST="${FAIL_LIST} ${file}"
#         else
#           get_bck_file
# 
#           if [ -f ${bck_file} ]; then
#             rm -f /var/webosinternals-*
# 
#             cp ${bck_file} /var/webosinternals-orig
# 
#             ${BSPATCH_EXEC} /var/webosinternals-orig /var/webosinternals-patched ${i} 2>&1
#             tmp_md5sum=`md5sum /var/webosinternals-patched | awk '{print $1}'`
# 
#             rm -f /var/webosinternals-*
#           fi
# 
#           if [ "${file_md5sum}" != "${tmp_md5sum}" ]; then
#             FAIL_LIST="${FAIL_LIST} ${file}"
#           fi
#         fi
#       fi
#     done
#   fi
# }

remove_text_patch() {
  if [ -f ${APP_DIR}/${PATCH_NAME} ]; then
    if [ "${patch_already_unapplied}" != "yes" ]; then
      echo | tee -a ${PATCH_LOG_FILE}
      echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
      echo "Unapplying text patch" | tee -a ${PATCH_LOG_FILE}
      echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
      echo | tee -a ${PATCH_LOG_FILE}

      ${PATCH_EXEC} -R -p 1 -d / --no-backup-if-mismatch < ${APP_DIR}/${PATCH_NAME} 2>&1 | tee -a ${PATCH_LOG_FILE}

      if [ ${?} -ne 0 ]; then
        for file in `${LSDIFF_EXEC} --addprefix=/ --strip=1 ${APP_DIR}/${PATCH_NAME}` ; do
          if [ -f ${file}.rej ]; then
            rm -f ${file}.rej
          fi
        done
      fi
    fi
  fi
}

# remove_binary_patches() {
#   if [ -d ${APP_DIR}/${BSPATCH_DIR} ]; then
#     echo | tee -a ${PATCH_LOG_FILE}
#     echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
#     echo "Unapplying binary patches" | tee -a ${PATCH_LOG_FILE}
#     echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
#     echo | tee -a ${PATCH_LOG_FILE}
# 
#     for i in `find ${APP_DIR}/${BSPATCH_DIR} -type f` ; do
#       file=`dirname ${i#${APP_DIR}/${BSPATCH_DIR}}`"/"`basename ${i} .bspatch`
# 
#       echo "restoring file ${file#/}" | tee -a ${PATCH_LOG_FILE}
# 
#       get_bck_file
# 
#       if [ -f ${bck_file} ]; then
#         cp -f ${bck_file} ${file} 2>&1 | tee -a ${PATCH_LOG_FILE}
# 
#         if [ ${?} -ne 0 ]; then
#           echo "  failed to restore binary file, file in use" | tee -a ${PATCH_LOG_FILE}
#         fi
#       fi
#     done
#   fi
# }

check_ota_update() {
  echo >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo "Checking md5sums for ota" >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo >> ${PATCH_LOG_FILE}

  for file in ${FILE_LIST} ; do
    if [ -f ${file} ]; then
      get_bck_file

      if [ -f ${bck_file} ]; then
        get_palm_md5sum

        file_md5sum=`md5sum ${file} | awk '{print $1}'`

        orig_md5sum=`grep -h "${appid} ${file} " ${PATCH_CONTROL_DIR}/file_md5sums | awk '{print $3}'`

        if [ -z "${palm_md5sum}" ]; then
          CREATED_LIST="${CREATED_LIST} ${file}"
        elif [ "${palm_md5sum}" = "${file_md5sum}" ] && [ ! -z "${file_md5sum}" ]; then
          echo "File matches current md5sum, assuming OTA" >> ${PATCH_LOG_FILE}
          echo "  file: ${file}" >> ${PATCH_LOG_FILE}

          cp -f ${file} ${bck_file}

          FAIL_LIST="${FAIL_LIST# ${file}}"

          RESTORE_LIST="${RESTORE_LIST} ${file}"
        elif [ "${palm_md5sum}" != "${orig_md5sum}" ] && [ ! -z "${orig_md5sum}" ]; then
          echo "The md5sum of file has changed, assuming OTA" >> ${PATCH_LOG_FILE}
          echo "  file: ${file}" >> ${PATCH_LOG_FILE}

          cp -f ${file} ${bck_file}

          FAIL_LIST="${FAIL_LIST# ${file}}"

          RESTORE_LIST="${RESTORE_LIST} ${file}"
        fi
      else
        echo "File has been completely removed, assuming OTA" >> ${PATCH_LOG_FILE}
        echo "  file: ${file}" >> ${PATCH_LOG_FILE}

        FAIL_LIST="${FAIL_LIST# ${file}}"
      fi
    fi
  done

  if [ ! -z "${FAIL_LIST}" ]; then
    do_remove_failure
  fi
}

clean_backup_files() {
  echo >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo "Cleaning up backup files" >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo >> ${PATCH_LOG_FILE}

  for file in ${CREATED_LIST} ; do
    get_bck_file

    if [ -f ${file} ]; then
      echo "Removing created file or old system file" >> ${PATCH_LOG_FILE}
      echo "  file: ${file}" >>${PATCH_LOG_FILE}

      rm -f ${file}
    fi
  done

  for file in ${RESTORE_LIST} ; do
    get_bck_file

    if [ -f ${bck_file} ]; then
      echo "Restoring unmodified or updated system file" >> ${PATCH_LOG_FILE}
      echo "  file: ${file}" >>${PATCH_LOG_FILE}

      mv -f ${bck_file} ${file}
    fi
  done

  for file in ${FILE_LIST} ; do
    get_bck_file

    get_palm_md5sum

    if [ ! -f ${file} ]; then
      file_md5sum=""
    else
      file_md5sum=`md5sum $file | awk '{print $1}'`
    fi

    if [ ! -f ${bck_file} ]; then
      orig_md5sum=""
    else
      orig_md5sum=`md5sum ${bck_file} | awk '{print $1}'`
    fi

    if [ ! -f ${file} ] && [ ! -s ${bck_file} ] || \
       [ "${file_md5sum}" = "${orig_md5sum}" ] || [ "${file_md5sum}" = "${palm_md5sum}" ]
    then
      if [ -f ${bck_file} ]; then
        if [ ! -s ${bck_file} ]; then
          echo "Removing unneeded generated backup file" >>${PATCH_LOG_FILE}
          echo "  file: ${bck_file}" >>${PATCH_LOG_FILE}
        else
          echo "Removing unneeded backup of system file" >>${PATCH_LOG_FILE}
          echo "  file: ${bck_file}" >>${PATCH_LOG_FILE}
        fi

        rm -f ${bck_file}
      fi

      tmpvar=`echo "${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${PATCH_CONTROL_DIR}/file_list
    fi

    if [ ! -z "${palm_md5sum}" ]; then
      tmpvar=`echo "${appid} ${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${PATCH_CONTROL_DIR}/file_md5sums
    fi

    if [ ! -z "${pkg_version}" ]; then
      tmpvar=`echo "${pkg_package} ${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${PATCH_CONTROL_DIR}/file_control
    fi
  done

  sed -i -e /"^`basename ${APP_DIR}` "/d ${PATCH_PACKAGES_LIST}
}

#
# Bunch of safety checks and required initializations
#

if [ ! -f ${PATCH_LOG_FILE} ]; then
  echo "*** Patch Log Created by Remove $(date) ***" > ${PATCH_LOG_FILE}
fi

# mount -o rw,remount / | tee -a ${PATCH_LOG_FILE} 1>&2

echo >> ${PATCH_LOG_FILE}
echo "------------------------------------------------------" >> ${PATCH_LOG_FILE}
echo "AUSMT REMOVE $(date)" >> ${PATCH_LOG_FILE}
echo "------------------------------------------------------" >> ${PATCH_LOG_FILE}
echo >> ${PATCH_LOG_FILE}

echo `basename ${APP_DIR}` >> ${PATCH_LOG_FILE}

if [ -f ${APP_DIR}/${PATCH_NAME} ]; then
  echo "  contains text patch" >> ${PATCH_LOG_FILE}
fi

# if [ -d ${APP_DIR}/${BSPATCH_DIR} ]; then
#   echo "  contains binary patches" >> ${PATCH_LOG_FILE}
# fi

echo >> ${PATCH_LOG_FILE}

if [ ! -x ${PATCH_EXEC} ]; then
  echo "ERROR: Cannot find ${PATCH_EXEC}" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_remove_failure
fi

if [ ! -x ${LSDIFF_EXEC} ]; then
  echo "ERROR: Cannot find ${LSDIFF_EXEC}" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_remove_failure
fi

# if [ ! -x ${BSPATCH_EXEC} ]; then
#   echo "ERROR: Cannot find ${BSPATCH_EXEC}" | tee -a ${PATCH_LOG_FILE} 1>&2
#   do_remove_failure
# fi

if [ -z ${APP_DIR} ]; then
  echo "ERROR: APP_DIR must be given for removing" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_remove_failure
fi

if [ ! -d ${APP_DIR} ]; then
  echo "ERROR: ${APP_DIR} is not a directory or does not exist!" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_remove_failure
fi

if [ ! -f ${APP_DIR}/${PATCH_NAME} ] && [ ! -d ${APP_DIR}/${BSPATCH_DIR} ] && [ ! -d ${APP_DIR}/${FILES_DIR} ]; then
  echo "ERROR: Cannot find patch file, binary patches or files directory!" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_remove_failure
fi

rm -f $PATCH_CACHE_FILE >/dev/null 2>&1

#
# The main function that controls all the magic stuff
#

verify_text_patch

# verify_binary_patches

check_ota_update

remove_text_patch

# remove_binary_patches

clean_backup_files

do_remove_success

exit 0

