#!/bin/sh

# 
# Some constants
# 

# Paths / Files
AUSMT_VAR_DIR=/var/lib/patchmanager/ausmt
AUSMT_CONTROL_DIR=${AUSMT_VAR_DIR}/control
PATCH_ROOT_DIR=/usr/share/patchmanager/patches
PATCH_DIR=${PATCH_ROOT_DIR}/${1}
# BSPATCH_DIR=binary_patches

AUSMT_LOG_FILE=${AUSMT_VAR_DIR}/ausmt.log
AUSMT_PACKAGES_LIST_FILE=${AUSMT_VAR_DIR}/packages
AUSMT_CACHE_FILE=${AUSMT_VAR_DIR}/packages.cache

LIPSTICK_FILE=/usr/bin/lipstick
PANDORA_MD5SUMS_FILE=/opt/lipstick-pandora/md5sums

# Constants
PATCH_NAME=unified_diff.patch
VERSION=ausmt-sailfishos-1

# Applications
MD5SUM_EXEC=/usr/bin/sha256sum
RPM_EXEC=/bin/rpm
PATCH_EXEC=/usr/bin/patch
LSDIFF_EXEC=/usr/bin/lsdiff
# BSPATCH_EXEC=/usr/bin/bspatch

#
# Here starts the part where all the magic happens
#

#
# Helper functions that do all the needed heavy work
#

do_install_failure() {
  ${PATCH_EXEC} -s -p1 -d / --dry-run < ${PATCH_DIR}/${PATCH_NAME} | tee -a $PATCH_LOG 1>&2

  echo | tee -a ${AUSMT_LOG_FILE}
  echo "*** FAILED ***" | tee -a ${AUSMT_LOG_FILE}
  echo | tee -a ${AUSMT_LOG_FILE}

  /opt/ausmt/ausmt-notify-wrapper fin ${PATCH_DIR}

  rm -f $AUSMT_CACHE_FILE >/dev/null 2>&1

#   mount -o ro,remount / | tee -a ${AUSMT_LOG_FILE} 1>&2

  exit 1
}

do_install_success() {
  echo | tee -a ${AUSMT_LOG_FILE}
  echo "*** SUCCESS ***" | tee -a ${AUSMT_LOG_FILE}
  echo | tee -a ${AUSMT_LOG_FILE}

  /opt/ausmt/ausmt-notify-wrapper in ${PATCH_DIR}

  rm -f $AUSMT_CACHE_FILE >/dev/null 2>&1

#   mount -o ro,remount / | tee -a ${AUSMT_LOG_FILE} 1>&2

  exit 0
}

get_bck_file() {
  bck_file=`dirname ${file}`"/."`basename ${file}`".orig"

  if [ ! -f ${bck_file} ]; then
    bck_file="${file}.webosinternals.orig"
  fi
}

get_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  appid=`basename ${PATCH_DIR}`

  if [ -f $AUSMT_CACHE_FILE ]; then
    md5sums_line=`grep "^${file} " $AUSMT_CACHE_FILE`

    palm_md5sum=`echo ${md5sums_line} | awk '{print $2}'`

    pkg_package=`echo ${md5sums_line} | awk '{print $3}'`

    pkg_version=`echo ${md5sums_line} | awk '{print $4}'`
  fi
}

find_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  echo "Finding md5sum for original file" >> ${AUSMT_LOG_FILE}
  echo "  file: ${file}" >> ${AUSMT_LOG_FILE}
  
  # We change from Palm, and use rpm to query the MD5 (or SHA256) sum
  # Check if the file is in an RPM
  if [ ! -z "$(${RPM_EXEC} -q --queryformat '[%{FILENAMES}\n]' -f ${file} | grep ^${file})" ]; then
    pkg_package=$(${RPM_EXEC} -q --queryformat '%{NAME}' -f ${file} 2> /dev/null)
    pkg_version=$(${RPM_EXEC} -q --queryformat '%{VERSION}-%{RELEASE}' -f ${file} 2> /dev/null)
    palm_md5sum=$(${RPM_EXEC} -q --queryformat '[%{FILENAMES} %{FILEMD5S}\n]' -f ${file} | grep ${file} | awk '{print $2}' 2> /dev/null)
  fi
  
  if [ -z "${palm_md5sum}" ]; then
    echo "File not found in RPM packages, checking pandora" >> ${AUSMT_LOG_FILE}
    pkg_package=$(${RPM_EXEC} -q --queryformat '%{NAME}' -f ${LIPSTICK_FILE} 2> /dev/null)
    pkg_version=$(${RPM_EXEC} -q --queryformat '%{VERSION}-%{RELEASE}' -f ${LIPSTICK_FILE} 2> /dev/null)
    palm_md5sum=$(cat ${PANDORA_MD5SUMS_FILE} | grep ${file} | awk '{print $1}' 2> /dev/null)
  fi
  
  if [ ! -z "${palm_md5sum}" ]; then
    echo "${file} ${palm_md5sum} ${pkg_package} ${pkg_version}" >>$AUSMT_CACHE_FILE
  fi
}

verify_text_patch() {
  if [ -f ${PATCH_DIR}/${PATCH_NAME} ]; then
    echo >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo "Checking patch files" >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo >> ${AUSMT_LOG_FILE}

    FILE_LIST=" "`${LSDIFF_EXEC} --addprefix=/ --strip=1 ${PATCH_DIR}/${PATCH_NAME}`

    for file in ${FILE_LIST} ; do
      if [ -f ${file} ]; then
        find_palm_md5sum

        if [ -z "${palm_md5sum}" ]; then
          echo | tee -a ${AUSMT_LOG_FILE} 1>&2
          echo "ERROR: Failed to find md5sum for the file" | tee -a ${AUSMT_LOG_FILE} 1>&2
          echo "  file: ${file}" | tee -a ${AUSMT_LOG_FILE} 1>&2
          echo | tee -a ${AUSMT_LOG_FILE} 1>&2

          do_install_failure
        fi
      fi
    done

    echo >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo "Dry running patch" >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo >> ${AUSMT_LOG_FILE}

    ${PATCH_EXEC} -f -p 1 -d / --dry-run < ${PATCH_DIR}/${PATCH_NAME} 2>&1 >> ${AUSMT_LOG_FILE}

    if [ ${?} -ne 0 ]; then
      echo >> ${AUSMT_LOG_FILE}
      echo "----------------------------------" >> ${AUSMT_LOG_FILE}
      echo "Dry run failed, trying with -R" >> ${AUSMT_LOG_FILE}
      echo "----------------------------------" >> ${AUSMT_LOG_FILE}
      echo >> ${AUSMT_LOG_FILE}

      ${PATCH_EXEC} -f -R -p 1 -d / --dry-run < ${PATCH_DIR}/${PATCH_NAME} 2>&1 >> ${AUSMT_LOG_FILE}

      if [ ${?} -ne 0 ]; then
        do_install_failure
      else
        echo | tee -a ${AUSMT_LOG_FILE}
        echo "Interestingly, the patch seems to be already applied" | tee -a ${AUSMT_LOG_FILE}
        echo | tee -a ${AUSMT_LOG_FILE}

        patch_already_applied="yes"
      fi
    fi
  fi
}

# verify_binary_patches() {
#   if [ -d ${PATCH_DIR}/${BSPATCH_DIR} ]; then
#     echo >> ${AUSMT_LOG_FILE}
#     echo "----------------------------------" >> ${AUSMT_LOG_FILE}
#     echo "Checking binary patches" >> ${AUSMT_LOG_FILE}
#     echo "----------------------------------" >> ${AUSMT_LOG_FILE}
#     echo >> ${AUSMT_LOG_FILE}
# 
#     for i in `find ${PATCH_DIR}/${BSPATCH_DIR} -type f` ; do
#       file=`dirname ${i#${PATCH_DIR}/${BSPATCH_DIR}}`"/"`basename ${i} .bspatch`
# 
#       if [ -f ${file} ]; then
#         find_palm_md5sum
# 
#         file_md5sum=`${MD5SUM_EXEC} ${file} | awk '{print $1}'`
# 
#         if [ -z "${palm_md5sum}" ]; then
#           echo | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo "ERROR: Failed to find md5sum for the file" | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo "  file: ${file}" | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo | tee -a ${AUSMT_LOG_FILE} 1>&2
# 
#           do_install_failure
#         fi
# 
#         if [ "${file_md5sum}" = "${palm_md5sum}" ]; then
#           FILE_LIST="${FILE_LIST} ${file}"
#         else
#           echo | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo "ERROR: File must be stock to be binary patched" | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo "  file: ${file}" | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo "  md5sum: ${file_md5sum}" | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo "  palm_md5sum: ${palm_md5sum}" | tee -a ${AUSMT_LOG_FILE} 1>&2
#           echo | tee -a ${AUSMT_LOG_FILE} 1>&2
# 
#           do_install_failure
#         fi
#       else
#         echo | tee -a ${AUSMT_LOG_FILE} 1>&2
#         echo "ERROR: File to be binary patched does not exist" | tee -a ${AUSMT_LOG_FILE} 1>&2
#         echo "  file: ${file}" | tee -a ${AUSMT_LOG_FILE} 1>&2
#         echo | tee -a ${AUSMT_LOG_FILE} 1>&2
# 
#         do_install_failure
#       fi
#     done
#   fi
# }

install_text_patch() {
  if [ -f ${PATCH_DIR}/${PATCH_NAME} ]; then
    if [ "${patch_already_applied}" != "yes" ]; then
      echo | tee -a ${AUSMT_LOG_FILE}
      echo "----------------------------------" | tee -a ${AUSMT_LOG_FILE}
      echo "Applying text patch" | tee -a ${AUSMT_LOG_FILE}
      echo "----------------------------------" | tee -a ${AUSMT_LOG_FILE}
      echo | tee -a ${AUSMT_LOG_FILE}

      ${PATCH_EXEC} -f -p 1 -d / --no-backup-if-mismatch < ${PATCH_DIR}/${PATCH_NAME} 2>&1 | tee -a ${AUSMT_LOG_FILE}
    fi
  fi
}

# install_binary_patches() {
#   if [ -d ${PATCH_DIR}/${BSPATCH_DIR} ]; then
#     echo | tee -a ${AUSMT_LOG_FILE}
#     echo "----------------------------------" | tee -a ${AUSMT_LOG_FILE}
#     echo "Applying binary patches" | tee -a ${AUSMT_LOG_FILE}
#     echo "----------------------------------" | tee -a ${AUSMT_LOG_FILE}
#     echo | tee -a ${AUSMT_LOG_FILE}
# 
#     for i in `find ${PATCH_DIR}/${BSPATCH_DIR} -type f` ; do
#       file=`dirname ${i#${PATCH_DIR}/${BSPATCH_DIR}}`"/"`basename ${i} .bspatch`
# 
#       get_bck_file
# 
#       echo "patching file ${file#/}" | tee -a ${AUSMT_LOG_FILE}
# 
#       rm -f /var/webosinternals-*
# 
#       cp ${file} /var/webosinternals-orig
# 
#       ${BSPATCH_EXEC} /var/webosinternals-orig /var/webosinternals-patched ${i} 2>&1 | tee -a ${AUSMT_LOG_FILE}
# 
#       cp -f /var/webosinternals-patched ${file}
# 
#       if [ ${?} -ne 0 ]; then
#         echo "  failed to patch binary file, file in use" | tee -a ${AUSMT_LOG_FILE}
#       elif [ -x ${bck_file} ]; then
#         chmod 755 ${file}
#       fi
# 
#       rm -f /var/webosinternals-*
#     done
#   fi
# }
# 

check_ota_update() {
  echo >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo "Checking md5sums for ota" >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo >> ${AUSMT_LOG_FILE}

  for file in ${FILE_LIST} ; do
    get_bck_file

    get_palm_md5sum

    if [ -f ${bck_file} ]; then
      file_md5sum=`${MD5SUM_EXEC} ${file} | awk '{print $1}'`

      if [ "${file_md5sum}" = "${palm_md5sum}" ]; then
        echo "File matches current system md5sum, assuming OTA" >> ${AUSMT_LOG_FILE}
        echo "  file: ${file}" >> ${AUSMT_LOG_FILE}

        rm -f ${bck_file}
      fi
    fi
  done
}

create_backup_files() {
  echo >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo "Creating backup files" >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo >> ${AUSMT_LOG_FILE}

  for file in ${FILE_LIST} ; do
    get_bck_file

    get_palm_md5sum

    if [ ! -f ${bck_file} ]; then
      if [ ! -f ${file} ]; then
        echo "Created file, generating empty backup file" >>${AUSMT_LOG_FILE}
        echo "  file: ${file}" >> ${AUSMT_LOG_FILE}

        mkdir -p `dirname ${file}`

        touch ${bck_file}
      else
        echo "Modified file, backing up the original file" >> ${AUSMT_LOG_FILE}
        echo "  file: ${file}" >> ${AUSMT_LOG_FILE}

        cp ${file} ${bck_file}
      fi
    fi

    if [ ! -f ${file} ]; then
      file_md5sum=""
    else
      file_md5sum=`${MD5SUM_EXEC} $file | awk '{print $1}'`
    fi

    if [ ! -f ${bck_file} ]; then
      orig_md5sum=""
    else
      orig_md5sum=`${MD5SUM_EXEC} ${bck_file} | awk '{print $1}'`
    fi

    if [ ! -f ${file} ] && [ ! -s ${bck_file} ] || \
      [ "${file_md5sum}" = "${palm_md5sum}" ] || [ "${orig_md5sum}" = "${palm_md5sum}" ]
    then
      tmpvar=`echo "${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${AUSMT_CONTROL_DIR}/file_list
      echo "${file} ${VERSION}" >> ${AUSMT_CONTROL_DIR}/file_list
    fi

    if [ ! -z "${palm_md5sum}" ]; then
      tmpvar=`echo "${appid} ${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${AUSMT_CONTROL_DIR}/file_md5sums
      echo "${appid} ${file} ${palm_md5sum}" >> ${AUSMT_CONTROL_DIR}/file_md5sums
    fi

    if [ ! -z "${pkg_version}" ]; then
      tmpvar=`echo "${pkg_package} ${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${AUSMT_CONTROL_DIR}/file_control
      echo "${pkg_package} ${file} ${pkg_version}" >> ${AUSMT_CONTROL_DIR}/file_control
    fi
  done

  sed -i -e /"^`basename ${PATCH_DIR}` "/d ${AUSMT_PACKAGES_LIST_FILE}

  echo "`basename ${PATCH_DIR}` ${VERSION}" >> ${AUSMT_PACKAGES_LIST_FILE}
}

#
# Bunch of safety checks and required initializations
#

mkdir -p ${AUSMT_VAR_DIR} > /dev/null 2>&1

if [ ! -f ${AUSMT_LOG_FILE} ]; then
  echo "*** Patch Log Created by Install $(date) ***" > ${AUSMT_LOG_FILE}
fi

# mount -o rw,remount / | tee -a ${AUSMT_LOG_FILE} 1>&2

echo >> ${AUSMT_LOG_FILE}
echo "------------------------------------------------------" >> ${AUSMT_LOG_FILE}
echo "AUSMT INSTALL $(date)" >> ${AUSMT_LOG_FILE}
echo "------------------------------------------------------" >> ${AUSMT_LOG_FILE}
echo >> ${AUSMT_LOG_FILE}

echo `basename ${PATCH_DIR}` >> ${AUSMT_LOG_FILE}

if [ -f ${PATCH_DIR}/${PATCH_NAME} ]; then
  echo "  contains text patch" >> ${AUSMT_LOG_FILE}
fi

# if [ -d ${PATCH_DIR}/${BSPATCH_DIR} ]; then
#   echo "  contains binary patches" >> ${AUSMT_LOG_FILE}
# fi

echo >> ${AUSMT_LOG_FILE}

if [ ! -x ${PATCH_EXEC} ]; then
  echo "ERROR: Cannot find ${PATCH_EXEC}" | tee -a ${AUSMT_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -x ${LSDIFF_EXEC} ]; then
  echo "ERROR: Cannot find ${LSDIFF_EXEC}" | tee -a ${AUSMT_LOG_FILE} 1>&2
  do_install_failure
fi

# if [ ! -x ${BSPATCH_EXEC} ]; then
#   echo "ERROR: Cannot find ${BSPATCH_EXEC}" | tee -a ${AUSMT_LOG_FILE} 1>&2
#   do_install_failure
# fi

if [ -z ${PATCH_DIR} ]; then
  echo "ERROR: PATCH_DIR must be given for installing" | tee -a ${AUSMT_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -d ${PATCH_DIR} ]; then
  echo "ERROR: ${PATCH_DIR} is not a directory or does not exist!" | tee -a ${AUSMT_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -f ${PATCH_DIR}/${PATCH_NAME} ] && [ ! -d ${PATCH_DIR}/${BSPATCH_DIR} ] && [ ! -d ${PATCH_DIR}/${FILES_DIR} ]; then
  echo "ERROR: Cannot find patch file, binary patches or files directory!" | tee -a ${AUSMT_LOG_FILE} 1>&2
  do_install_failure
fi

#
# Intialize / update the aupt control system
#

mkdir -p ${AUSMT_CONTROL_DIR} >/dev/null 2>&1

if [ -f ${AUSMT_CONTROL_DIR}/backups ]; then
  echo "ERROR: Old backup system detected, not supported by AUSMT!" | tee -a ${AUSMT_LOG_FILE} 1>&2
  do_install_failure
fi

if [ -f ${AUSMT_CONTROL_DIR}/packages ]; then
  echo "ERROR: Old control system detected, not supported by AUSMT!" | tee -a ${AUSMT_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -f ${AUSMT_CONTROL_DIR}/file_list ]; then
  touch ${AUSMT_CONTROL_DIR}/file_list || do_install_failure
fi

if [ ! -f ${AUSMT_CONTROL_DIR}/file_control ]; then
  touch ${AUSMT_CONTROL_DIR}/file_control || do_install_failure
fi
 
if [ ! -f ${AUSMT_CONTROL_DIR}/file_md5sums ]; then
  touch ${AUSMT_CONTROL_DIR}/file_md5sums || do_install_failure
fi

if [ ! -f ${AUSMT_PACKAGES_LIST_FILE} ]; then
  touch ${AUSMT_PACKAGES_LIST_FILE} || do_install_failure
fi

rm -f $AUSMT_CACHE_FILE >/dev/null 2>&1

#
# The main function that controls all the magic stuff
#

verify_text_patch

# verify_binary_patches

check_ota_update

create_backup_files

install_text_patch

# install_binary_patches

do_install_success

exit 0
